<?php
/**
 * Magento Enterprise Edition
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Magento Enterprise Edition License
 * that is bundled with this package in the file LICENSE_EE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.magentocommerce.com/license/enterprise-edition
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     rwd_default
 * @copyright   Copyright (c) 2014 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://www.magentocommerce.com/license/enterprise-edition
 */

/**
 * Product view template
 *
 * @see Mage_Catalog_Block_Product_View
 * @see Mage_Review_Block_Product_View
 */
?>
<?php $_helper = $this->helper('catalog/output'); ?>
<?php $_product = $this->getProduct(); ?>

<?php
$configurableAssociatedData = '{}';

if ($_product->getTypeId() == "configurable") {
    $data = array('default' =>
    array(
        'image' => (string)$this->helper('catalog/image')->init($_product, 'image'),
        'name' => $_product->getName(),
        'description' => $_product->getDescription(),
    ),
    );
   // $associated_products = $_product->loadByAttribute('sku', $_product->getSku())->getTypeInstance()->getUsedProducts();
    $associated_products = $_product->getTypeInstance()->getUsedProducts();
    foreach ($associated_products as $assoc) {
        $image = (string)($assoc->image == "no_selection" || $assoc->image == "" ?
            $this->helper('catalog/image')->init($_product, 'image'):
            $this->helper('catalog/image')->init($assoc, 'image'));

        $data[$assoc->getId()] =
            array(
                'image' => $image,
                'name' => $assoc->getName(),
                'description' => $assoc->getDescription(),
            );


    }
    $configurableAssociatedData = json_encode($data);
}


?>
<script type="text/javascript">
    <?php if($_product->getTypeId() == "configurable"): ?>
        var selectedAssocProducts = {};
    <?php endif; ?>
    var optionsPrice = new Product.OptionsPrice(<?php echo $this->getJsonConfig() ?>);
    var associatedData = <?php echo $configurableAssociatedData; ?>;
</script>
<div id="messages_product_view"><?php echo $this->getMessagesBlock()->getGroupedHtml() ?></div>
<div class="product-view">
    <div class="product-essential">
        <form action="<?php echo $this->getSubmitUrl($_product) ?>" method="post" id="product_addtocart_form"<?php if($_product->getOptions()): ?> enctype="multipart/form-data"<?php endif; ?>>
            <?php echo $this->getBlockHtml('formkey') ?>
            <div class="no-display">
                <input type="hidden" name="product" value="<?php echo $_product->getId() ?>" />
                <!--<input type="hidden" name="related_product" id="related-products-field" value="" />-->
            </div>

            <div class="product-img-box">
                <div class="product-name">
                    <h1><?php echo $_helper->productAttribute($_product, $_product->getName(), 'name') ?></h1>
                </div>
                <?php echo $this->getChildHtml('media') ?>
            </div>

            <div class="product-shop">
                <div class="product-name">
                    <span class="h1"><?php echo $_helper->productAttribute($_product, $_product->getName(), 'name') ?></span>
                </div>

                <!-- CONFIGURABLE OPTIONS. -->



                <div class="product-collateral toggle-content tabs">
                    <?php if ($detailedInfoGroup = $this->getChildGroup('detailed_info', 'getChildHtml')):?>
                        <dl id="collateral-tabs" class="collateral-tabs">
                            <?php foreach ($detailedInfoGroup as $alias => $html):?>
                                <dt class="tab"><span><?php echo $this->escapeHtml($this->getChildData($alias, 'title')) ?></span></dt>
                                <dd class="tab-container">
                                    <div class="tab-content <?php echo 'content-' . strtolower(preg_replace('/[^a-z0-9\_]+/i','',$this->getChildData($alias, 'title'))); ?>"><?php echo $html ?></div>
                                </dd>
                            <?php endforeach;?>
                        </dl>
                    <?php endif; ?>
                </div>

            </div>

            <?php if ($_product->isSaleable() && $this->hasOptions()):?>
                <?php echo $this->getChildChildHtml('container2', '', true, true) ?>
            <?php endif;?>

            <div id="c2qitems" style="display:none">

                <?php
                // -- C2Q buttons --
                echo $this->getChildHtml('addtocart');
                if (!$_product->isSaleable()):
                    echo Mage::app()->getLayout()->createBlock('qquoteadv/qquotebtn')
                        ->setData('product', $_product)
                        ->setTemplate('qquoteadv/catalog/product/view/addtoquoteadv.phtml')
                        ->toHtml();
                endif;
                ?>
<!-- other -->
                <?php echo $this->getChildHtml('other'); ?>

            </div>



        </form>
        <script type="text/javascript">
        //<![CDATA[
            var productAddToCartForm = new VarienForm('product_addtocart_form');
            productAddToCartForm.submit = function(button, url) {
                if (this.validator.validate()) {
                    var form = this.form;
                    var oldUrl = form.action;

                    if (url) {
                       form.action = url;
                    }
                    var e = null;
                    try {
                        this.form.submit();
                    } catch (e) {
                    }
                    this.form.action = oldUrl;
                    if (e) {
                        throw e;
                    }

                    if (button && button != 'undefined') {
                        button.disabled = true;
                    }
                }
            }.bind(productAddToCartForm);

            productAddToCartForm.submitLight = function(button, url){
                if(this.validator) {
                    var nv = Validation.methods;
                    delete Validation.methods['required-entry'];
                    delete Validation.methods['validate-one-required'];
                    delete Validation.methods['validate-one-required-by-name'];
                    // Remove custom datetime validators
                    for (var methodName in Validation.methods) {
                        if (methodName.match(/^validate-datetime-.*/i)) {
                            delete Validation.methods[methodName];
                        }
                    }

                    if (this.validator.validate()) {
                        if (url) {
                            this.form.action = url;
                        }
                        this.form.submit();
                    }
                    Object.extend(Validation.methods, nv);
                }
            }.bind(productAddToCartForm);
        //]]>
        </script>
    </div>
    <?php echo $this->getChildHtml('related_products') ?>

</div>
